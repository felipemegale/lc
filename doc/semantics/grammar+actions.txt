 S -> {Dec}* {Com}* EOF

Dec -> var {Lis}+ | const id<U1> = <C1>[<C2>'-'] valor<G>;

Lis -> <C1>(integer<C2> | char) id<U1><T1> <C1>[<C2>ValVet<T4>] {, id<U1> <C1>[<C2>ValVet]}*;

ValVet -> "[" ExpS<T2> "]" | = <C1>[<C2>'-'] valor<T3>

Comando -> Atr | Rep | Tes | ; | Esc | Lei

Atr -> id ["[" Exp1 "]"]<U2> = Exp2;
s
Rep -> for id<U2> = Exp1 to Exp2 [step num] do
        ("{"{Com}*"}" | Com)

Tes -> if Exp1 then ("{"{Com}*"}" | Com) [else ("{"{Com}*"}" | Com)]

Esc -> write "("Exps1")"; | writeln "("Exps2")"

Lei -> readln "("id<U2>")";

Exps -> Exp1 {, Exps}*

Exp -> ExpS1 [(=|<>|<|>|<=|>=) ExpS2]

ExpS -> [+ | -] Ter1 {(+|-|or) Ter2}*

Ter -> Fat1 {(*|/|%|and) Fat2}*

Fat -> not Fat1 | "(" Exp ")" | valor | id ["["Exp"]"]<U2>